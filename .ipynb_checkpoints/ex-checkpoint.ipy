{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "b5322c7b",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as mtl\n",
    "import seaborn as sb"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "5b02ea35",
   "metadata": {},
   "outputs": [],
   "source": [
    "df=pd.read_csv('advertising.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d54d6768",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['TV', 'Radio', 'Newspaper', 'Sales'], dtype='object')"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "2dd4e216",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TV</th>\n",
       "      <th>Radio</th>\n",
       "      <th>Newspaper</th>\n",
       "      <th>Sales</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>230.1</td>\n",
       "      <td>37.8</td>\n",
       "      <td>69.2</td>\n",
       "      <td>22.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>44.5</td>\n",
       "      <td>39.3</td>\n",
       "      <td>45.1</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>17.2</td>\n",
       "      <td>45.9</td>\n",
       "      <td>69.3</td>\n",
       "      <td>12.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>151.5</td>\n",
       "      <td>41.3</td>\n",
       "      <td>58.5</td>\n",
       "      <td>16.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>180.8</td>\n",
       "      <td>10.8</td>\n",
       "      <td>58.4</td>\n",
       "      <td>17.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>38.2</td>\n",
       "      <td>3.7</td>\n",
       "      <td>13.8</td>\n",
       "      <td>7.6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>94.2</td>\n",
       "      <td>4.9</td>\n",
       "      <td>8.1</td>\n",
       "      <td>14.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>177.0</td>\n",
       "      <td>9.3</td>\n",
       "      <td>6.4</td>\n",
       "      <td>14.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>283.6</td>\n",
       "      <td>42.0</td>\n",
       "      <td>66.2</td>\n",
       "      <td>25.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>232.1</td>\n",
       "      <td>8.6</td>\n",
       "      <td>8.7</td>\n",
       "      <td>18.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        TV  Radio  Newspaper  Sales\n",
       "0    230.1   37.8       69.2   22.1\n",
       "1     44.5   39.3       45.1   10.4\n",
       "2     17.2   45.9       69.3   12.0\n",
       "3    151.5   41.3       58.5   16.5\n",
       "4    180.8   10.8       58.4   17.9\n",
       "..     ...    ...        ...    ...\n",
       "195   38.2    3.7       13.8    7.6\n",
       "196   94.2    4.9        8.1   14.0\n",
       "197  177.0    9.3        6.4   14.8\n",
       "198  283.6   42.0       66.2   25.5\n",
       "199  232.1    8.6        8.7   18.4\n",
       "\n",
       "[200 rows x 4 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f3afed02",
   "metadata": {},
   "outputs": [],
   "source": [
    "X= df.drop(['Sales'],axis = 1).values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "494f2deb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "41791313",
   "metadata": {},
   "outputs": [],
   "source": [
    "y=df['Sales'].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3077a53",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7207c781",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "871d6001",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data=X , x=X[:,0] , y=y)\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "5456a554",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data=X , x=X[:,1] , y=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "2301e48e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sb.scatterplot(data=X , x=X[:,2] , y=y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "fbd7794d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "tv_r : 0.9012079133023309\n",
      "tv_p : 7.927911625320818e-74\n",
      "radio_r : 0.34963109700766926\n",
      "tv_p : 3.882892364494171e-07\n",
      "nws_r : 0.1579600261549263\n",
      "nws_p : 0.025487444306997908\n"
     ]
    }
   ],
   "source": [
    "#pearson coefficient is used to check the strength of the linear relationship (r)\n",
    "#perason method is used when both x,y are continuous\n",
    "\n",
    "#spearman coreation is used when variables are in ordinal scale(Eg: x=experience in years, y= salary scale 1-5 ,low to high )\n",
    "#ordinal - data should be in a order \n",
    "#nominal = just catagories , not ordre eg: male,female\n",
    "\n",
    "# p value , H0 - there is no linear relatinship\n",
    "# if r = -1 strong negative linear relationship  r=+1 strong positive linear relationship r= 0 no linear relationship\n",
    "\n",
    "#if p value <alpha(0.05) reject H0\n",
    "\n",
    "# refer this https://realpython.com/numpy-scipy-pandas-correlation-python/\n",
    "\n",
    "\n",
    "import scipy.stats\n",
    "tv= X[:,0]\n",
    "radio = X[:,1]\n",
    "nws = X[:,2]\n",
    "\n",
    "r_tv,p_tv = scipy.stats.pearsonr(tv, y)\n",
    "r_radio,p_radio= scipy.stats.pearsonr(radio, y)\n",
    "r_nws,p_nws= scipy.stats.pearsonr(nws, y)\n",
    "\n",
    "print(f\"tv_r : {r_tv}\")\n",
    "print(f\"tv_p : {p_tv}\")\n",
    "print(f\"radio_r : {r_radio}\")\n",
    "print(f\"tv_p : {p_radio}\")\n",
    "print(f\"nws_r : {r_nws}\")\n",
    "print(f\"nws_p : {p_nws}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "9993831f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.892\n",
      "Model:                            OLS   Adj. R-squared:                  0.890\n",
      "Method:                 Least Squares   F-statistic:                     374.3\n",
      "Date:                Sun, 26 Sep 2021   Prob (F-statistic):           1.69e-65\n",
      "Time:                        15:29:09   Log-Likelihood:                -271.70\n",
      "No. Observations:                 140   AIC:                             551.4\n",
      "Df Residuals:                     136   BIC:                             563.2\n",
      "Df Model:                           3                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const          4.7438      0.400     11.863      0.000       3.953       5.535\n",
      "x1             0.0536      0.002     30.937      0.000       0.050       0.057\n",
      "x2             0.1027      0.011      9.726      0.000       0.082       0.124\n",
      "x3             0.0079      0.007      1.064      0.289      -0.007       0.023\n",
      "==============================================================================\n",
      "Omnibus:                       11.236   Durbin-Watson:                   2.106\n",
      "Prob(Omnibus):                  0.004   Jarque-Bera (JB):               18.525\n",
      "Skew:                          -0.374   Prob(JB):                     9.49e-05\n",
      "Kurtosis:                       4.618   Cond. No.                         500.\n",
      "==============================================================================\n",
      "\n",
      "Notes:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n"
     ]
    }
   ],
   "source": [
    "#statmopdels is used to check the detailed summary \n",
    "\n",
    "import statsmodels.api as sm\n",
    "x = sm.add_constant(X_train)\n",
    "est = sm.OLS(y_train, x)\n",
    "est2 = est.fit()\n",
    "print(est2.summary())\n",
    "\n",
    "# Prob (F-statistic)â€‹ h0: beta_i = 0 for all i , H1:beta_i <>0 for atleast one i\n",
    "# if this pvalue (Prob (F-statistic): ) is less than 0.05 reject H0 ,there is atlease 1 x_i which can be used \n",
    "#to explain the variation of y. then the regressin is sigificant\n",
    "#if the regresion is significant then we test the significance of each beta\n",
    "\n",
    "\n",
    "#h0 beta_i = 0 vs H1=beta_i <> 0\n",
    "# if p value <0.05 reject Ho, beta_i is significant , it is important to have x_i in the model \n",
    "# then variation of y can be explained by x_i to a certain extent "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "8998903d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[  1. , 284.3,  10.6,   6.4],\n",
       "       [  1. , 184.9,  21. ,  22. ],\n",
       "       [  1. , 112.9,  17.4,  38.6],\n",
       "       [  1. ,  23.8,  35.1,  65.9],\n",
       "       [  1. , 290.7,   4.1,   8.5],\n",
       "       [  1. ,  19.4,  16. ,  22.3],\n",
       "       [  1. , 293.6,  27.7,   1.8],\n",
       "       [  1. ,  18.7,  12.1,  23.4],\n",
       "       [  1. , 134.3,   4.9,   9.3],\n",
       "       [  1. ,  25.6,  39. ,   9.3],\n",
       "       [  1. , 100.4,   9.6,   3.6],\n",
       "       [  1. ,  80.2,   0. ,   9.2],\n",
       "       [  1. , 188.4,  18.1,  25.6],\n",
       "       [  1. , 177. ,  33.4,  38.7],\n",
       "       [  1. , 125.7,  36.9,  79.2],\n",
       "       [  1. , 209.6,  20.6,  10.7],\n",
       "       [  1. , 142.9,  29.3,  12.6],\n",
       "       [  1. , 184.9,  43.9,   1.7],\n",
       "       [  1. , 222.4,   4.3,  49.8],\n",
       "       [  1. , 241.7,  38. ,  23.2],\n",
       "       [  1. ,  17.2,  45.9,  69.3],\n",
       "       [  1. , 120.5,  28.5,  14.2],\n",
       "       [  1. ,  89.7,   9.9,  35.7],\n",
       "       [  1. , 191.1,  28.7,  18.2],\n",
       "       [  1. ,  75.5,  10.8,   6. ],\n",
       "       [  1. , 193.2,  18.4,  65.7],\n",
       "       [  1. ,  85.7,  35.8,  49.3],\n",
       "       [  1. , 266.9,  43.8,   5. ],\n",
       "       [  1. ,  39.5,  41.1,   5.8],\n",
       "       [  1. , 261.3,  42.7,  54.7],\n",
       "       [  1. ,  13.2,  15.9,  49.6],\n",
       "       [  1. , 193.7,  35.4,  75.6],\n",
       "       [  1. , 296.4,  36.3, 100.9],\n",
       "       [  1. , 265.6,  20. ,   0.3],\n",
       "       [  1. , 214.7,  24. ,   4. ],\n",
       "       [  1. , 149.7,  35.6,   6. ],\n",
       "       [  1. , 131.7,  18.4,  34.6],\n",
       "       [  1. ,  57.5,  32.8,  23.5],\n",
       "       [  1. , 240.1,  16.7,  22.9],\n",
       "       [  1. , 141.3,  26.8,  46.2],\n",
       "       [  1. , 180.8,  10.8,  58.4],\n",
       "       [  1. ,  97.2,   1.5,  30. ],\n",
       "       [  1. , 220.5,  33.2,  37.9],\n",
       "       [  1. , 140.3,   1.9,   9. ],\n",
       "       [  1. , 255.4,  26.9,   5.5],\n",
       "       [  1. ,  96.2,  14.8,  38.9],\n",
       "       [  1. ,  66.1,   5.8,  24.2],\n",
       "       [  1. , 239.3,  15.5,  27.3],\n",
       "       [  1. , 175.7,  15.4,   2.4],\n",
       "       [  1. , 240.1,   7.3,   8.7],\n",
       "       [  1. ,  17.9,  37.6,  21.6],\n",
       "       [  1. , 230.1,  37.8,  69.2],\n",
       "       [  1. , 283.6,  42. ,  66.2],\n",
       "       [  1. , 171.3,  39.7,  37.7],\n",
       "       [  1. , 199.1,  30.6,  38.7],\n",
       "       [  1. , 123.1,  34.6,  12.4],\n",
       "       [  1. , 131.1,  42.8,  28.9],\n",
       "       [  1. ,  25.1,  25.7,  43.3],\n",
       "       [  1. , 163.5,  36.8,   7.4],\n",
       "       [  1. , 248.8,  27.1,  22.9],\n",
       "       [  1. , 202.5,  22.3,  31.6],\n",
       "       [  1. ,  13.1,   0.4,  25.6],\n",
       "       [  1. ,   4.1,  11.6,   5.7],\n",
       "       [  1. ,  93.9,  43.5,  50.5],\n",
       "       [  1. , 262.9,   3.5,  19.5],\n",
       "       [  1. , 228.3,  16.9,  26.2],\n",
       "       [  1. , 253.8,  21.3,  30. ],\n",
       "       [  1. , 243.2,  49. ,  44.3],\n",
       "       [  1. , 239.8,   4.1,  36.9],\n",
       "       [  1. , 228. ,  37.7,  32. ],\n",
       "       [  1. , 215.4,  23.6,  57.6],\n",
       "       [  1. , 239.9,  41.5,  18.5],\n",
       "       [  1. , 107.4,  14. ,  10.9],\n",
       "       [  1. , 187.8,  21.1,   9.5],\n",
       "       [  1. , 206.9,   8.4,  26.4],\n",
       "       [  1. ,  43. ,  25.9,  20.5],\n",
       "       [  1. , 151.5,  41.3,  58.5],\n",
       "       [  1. , 137.9,  46.4,  59. ],\n",
       "       [  1. , 182.6,  46.2,  58.7],\n",
       "       [  1. , 219.8,  33.5,  45.1],\n",
       "       [  1. , 156.6,   2.6,   8.3],\n",
       "       [  1. , 276.7,   2.3,  23.7],\n",
       "       [  1. , 205. ,  45.1,  19.6],\n",
       "       [  1. ,  66.9,  11.7,  36.8],\n",
       "       [  1. ,  76.4,  26.7,  22.3],\n",
       "       [  1. ,  95.7,   1.4,   7.4],\n",
       "       [  1. , 120.2,  19.6,  11.6],\n",
       "       [  1. , 225.8,   8.2,  56.5],\n",
       "       [  1. ,  28.6,   1.5,  33. ],\n",
       "       [  1. ,  68.4,  44.5,  35.6],\n",
       "       [  1. , 248.4,  30.2,  20.3],\n",
       "       [  1. , 218.5,   5.4,  27.4],\n",
       "       [  1. , 109.8,  47.8,  51.4],\n",
       "       [  1. ,   8.6,   2.1,   1. ],\n",
       "       [  1. ,  97.5,   7.6,   7.2],\n",
       "       [  1. , 210.7,  29.5,   9.3],\n",
       "       [  1. , 164.5,  20.9,  47.4],\n",
       "       [  1. , 265.2,   2.9,  43. ],\n",
       "       [  1. , 281.4,  39.6,  55.8],\n",
       "       [  1. ,  26.8,  33. ,  19.3],\n",
       "       [  1. , 276.9,  48.9,  41.8],\n",
       "       [  1. ,  36.9,  38.6,  65.6],\n",
       "       [  1. , 206.8,   5.2,  19.4],\n",
       "       [  1. , 287.6,  43. ,  71.8],\n",
       "       [  1. , 102.7,  29.6,   8.4],\n",
       "       [  1. , 262.7,  28.8,  15.9],\n",
       "       [  1. ,  90.4,   0.3,  23.2],\n",
       "       [  1. , 199.8,   3.1,  34.6],\n",
       "       [  1. ,  94.2,   4.9,   8.1],\n",
       "       [  1. , 210.8,  49.6,  37.7],\n",
       "       [  1. , 227.2,  15.8,  49.9],\n",
       "       [  1. ,  88.3,  25.5,  73.4],\n",
       "       [  1. , 237.4,   5.1,  23.5],\n",
       "       [  1. , 136.2,  19.2,  16.6],\n",
       "       [  1. , 172.5,  18.1,  30.7],\n",
       "       [  1. ,  17.2,   4.1,  31.6],\n",
       "       [  1. ,  59.6,  12. ,  43.1],\n",
       "       [  1. ,  74.7,  49.4,  45.7],\n",
       "       [  1. , 149.8,   1.3,  24.3],\n",
       "       [  1. , 166.8,  42. ,   3.6],\n",
       "       [  1. ,  44.5,  39.3,  45.1],\n",
       "       [  1. , 216.4,  41.7,  39.6],\n",
       "       [  1. ,  44.7,  25.8,  20.6],\n",
       "       [  1. ,   0.7,  39.6,   8.7],\n",
       "       [  1. , 121. ,   8.4,  48.7],\n",
       "       [  1. , 187.9,  17.2,  17.9],\n",
       "       [  1. , 135.2,  41.7,  45.9],\n",
       "       [  1. , 139.2,  14.3,  25.6],\n",
       "       [  1. , 110.7,  40.6,  63.2],\n",
       "       [  1. , 213.4,  24.6,  13.1],\n",
       "       [  1. ,  18.8,  21.7,  50.4],\n",
       "       [  1. , 232.1,   8.6,   8.7],\n",
       "       [  1. , 218.4,  27.7,  53.4],\n",
       "       [  1. , 286. ,  13.9,   3.7],\n",
       "       [  1. , 109.8,  14.3,  31.7],\n",
       "       [  1. ,  25. ,  11. ,  29.7],\n",
       "       [  1. , 204.1,  32.9,  46. ],\n",
       "       [  1. , 217.7,  33.5,  59. ],\n",
       "       [  1. , 165.6,  10. ,  17.6],\n",
       "       [  1. , 280.2,  10.1,  21.4]])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "55ad2e90",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "from sklearn import linear_model\n",
    "model = linear_model.LinearRegression()\n",
    "model_fit = model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "edd1d129",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "a1234514",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.05358869, 0.10270677, 0.00793167])"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.coef_\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df92e573",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4.743766701589687"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.intercept_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "dab67ad9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9010094306195092"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model_fit.score(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "776d9fa5",
   "metadata": {},
   "outputs": [],
   "source": [
    "f_results = model_fit.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "f3a60a51",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([17.15991908, 20.53369503, 23.68914396,  9.5191455 , 21.60736836,\n",
       "       12.78101318, 21.08636345,  8.76054246, 17.11499951, 16.68789636,\n",
       "        8.97584663,  8.57645026, 18.33212325,  8.17863567, 12.64605571,\n",
       "       14.94486946,  8.34939536, 17.83858948, 11.12172174, 20.37740648,\n",
       "       20.9483297 , 13.04035779, 11.01360656, 22.51142595,  9.40369784,\n",
       "        7.98591291, 20.86943368, 13.77882255, 10.83407064,  8.00419229,\n",
       "       15.88597618, 10.7027424 , 20.9521718 , 10.84679243, 21.50720813,\n",
       "       21.07347295, 12.22673775, 22.85273767, 12.57698182,  6.54597206,\n",
       "       11.93411853, 15.23490068, 10.07411153,  9.52159696, 17.11786382,\n",
       "        7.28032677, 10.49404864, 15.24356754, 11.20742176, 11.78392665,\n",
       "       14.01472163, 14.59884572, 10.82722434,  9.55839415,  9.03749681,\n",
       "       12.51183313, 10.52551021, 25.01900824,  7.99334943, 15.73916263])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "f_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "aaca03e4",
   "metadata": {},
   "outputs": [],
   "source": [
    "error = y_test-f_results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "14fb8c18",
   "metadata": {},
   "outputs": [],
   "source": [
    "#before using the model it is important to test the model adequacy (if the model is acceptable and satisfying assumptions)\n",
    "#Assunptions\n",
    "#=============\n",
    "#1. Linearity - There should be a linear relationship wih y and x_i\n",
    "\n",
    "#2. Normality of error terms - f-test is used to check the significant of the model.it assumes that the y values has a \n",
    "#F-distribution . but it can not be verified . therefore it can be tested by using the errors. if the errors are normally \n",
    "# distributed y has a f distribution\n",
    "\n",
    "#3.No multicollinearity amoung predicators - there are no relationships between x_i variable\n",
    "\n",
    "#4. no autocorelation between errors\n",
    "\n",
    "#5. Homoscedasticity\n",
    "#This assumes homoscedasticity, which is the same variance within our error terms. Heteroscedasticity, the violation of\n",
    "#homoscedasticity, occurs when we donâ€™t have an even variance across the error terms.\n",
    "\n",
    "\n",
    "# https://jeffmacaluso.github.io/post/LinearRegressionAssumptions/"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "78280bb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# y_results gives you predicted results for  x_train data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "301d7d61",
   "metadata": {},
   "outputs": [],
   "source": [
    "y_results = model_fit.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "d213f715",
   "metadata": {},
   "outputs": [],
   "source": [
    "err= y_train - y_results"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f0a92f86",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0f98200f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#checking assumption 1 \n",
    "# if there is linear relation of x exist with y then we can use the results of the model and plot against actual y\n",
    "# to see if there exist a linear relation\n",
    "\n",
    "sb.scatterplot(x= y_train, y=y_results)\n",
    "# there is a liner relationship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "3e8fdb31",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "-1.1546319456101628e-15"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# it is assumed that if the mean of the errors are are close to zero there exit a linear relationship between the variables\n",
    "est2.resid.mean()\n",
    "\n",
    "#this is close to zero .. Therefore there exist a linear relatinship"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "78b60d9f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "p-value from the test - below 0.05 generally means non-normal: 0.1891434536607328\n",
      "Residuals are normally distributed\n"
     ]
    }
   ],
   "source": [
    "#Assumption 2\n",
    "# you can use Anderson and Darling test or shapiro Wilks test\n",
    "\n",
    "# Anderson Darling test\n",
    "from statsmodels.stats.diagnostic import normal_ad\n",
    "p_value = normal_ad(est2.resid, axis=0)[1]\n",
    "print('p-value from the test - below 0.05 generally means non-normal:', p_value)\n",
    "    \n",
    "# Reporting the normality of the residuals\n",
    "if p_value < 0.05:\n",
    "    print('Residuals are not normally distributed')\n",
    "else:\n",
    "    print('Residuals are normally distributed')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "0e1a214c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "      feature       VIF\n",
      "0          TV  2.697679\n",
      "1       Radio  3.473818\n",
      "2  Newspapers  3.162643\n"
     ]
    }
   ],
   "source": [
    "# Assumption 3 checking for multicolinearity\n",
    "\n",
    "#Use VIF method to check this\n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "vif_data = pd.DataFrame()\n",
    "vif_data[\"feature\"] = ['TV','Radio','Newspapers']\n",
    "# calculating VIF for each feature\n",
    "vif_data[\"VIF\"] = [variance_inflation_factor(X_train, i)\n",
    "                          for i in range(3)]\n",
    "  \n",
    "print(vif_data)\n",
    "\n",
    "#VIF <max (10, 1/(1-R^2))\n",
    "#then there is no multicolinerity\n",
    "\n",
    "# here VIF is less than 10. so no multicolinerity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "ab112b83",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Durbin-Watson: 2.106255829752062\n",
      "Little to no autocorrelation \n",
      "\n",
      "Assumption satisfied\n"
     ]
    }
   ],
   "source": [
    "#Auusumption 4 No Autocorrelation of the Error TermsPermalink\n",
    "#use Durbin Watson test\n",
    "#'Values of 1.5 < d < 2.5 generally show that there is no autocorrelation in the data\n",
    "#0 to 2<d is positive autocorrelation\n",
    "#d>2 to 4 is negative autocorrelation\n",
    "\n",
    "from statsmodels.stats.stattools import durbin_watson\n",
    "durbinWatson = durbin_watson(est2.resid)\n",
    "\n",
    "print('Durbin-Watson:', durbinWatson)\n",
    "if durbinWatson < 1.5:\n",
    "   print('Signs of positive autocorrelation', '\\n')\n",
    "   print('Assumption not satisfied')\n",
    "elif durbinWatson > 2.5:\n",
    "   print('Signs of negative autocorrelation', '\\n')\n",
    "   print('Assumption not satisfied')\n",
    "else:\n",
    "   print('Little to no autocorrelation', '\\n')\n",
    "   print('Assumption satisfied')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b2b11748",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Assumption 5 - Homoscedasticity\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e8e7ec87",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aeaeae78",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
